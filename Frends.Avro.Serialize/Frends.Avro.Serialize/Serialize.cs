using Frends.Avro.Serialize.Definitions;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using Avro;
using Avro.Generic;
using Avro.IO;
using Confluent.SchemaRegistry;
using Confluent.SchemaRegistry.Serdes;
using Newtonsoft.Json.Linq;
using SolTechnology.Avro;
using af = Avro.File;
using ag = Avro.Generic;
using Schema = Confluent.SchemaRegistry.Schema;

namespace Frends.Avro.Serialize;

/// <summary>
/// Avro task.
/// </summary>
public class Avro
{
    /// <summary>
    /// Serialize JSON into Avro.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.Avro.Serialize)
    /// </summary>
    /// <param name="input">Input parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, string Xml }</returns>
    public static async Task<Result> Serialize(
        [PropertyTab] Input input,
        CancellationToken cancellationToken)
    {
        // Parse JSON string into JToken
        var jToken = JToken.Parse(input.Json);
        if (jToken is not JArray jArray)
        {
            throw new ArgumentException("Input JSON must be an array.");
        }

        var avroSchema = (RecordSchema)global::Avro.Schema.Parse(input.Schema);

        // Serialize JSON to Avro
        // using var avroStream = new MemoryStream();
        // var encoder = new BinaryEncoder(avroStream);
        // //var encoder = new global::Avro.IO.JsonEncoder(avroSchema, avroStream, true);//.WriteJson(input.Schema, encoder);
        //
        // var writer = new GenericDatumWriter<GenericRecord>(avroSchema);
        // foreach(var recordJToken in jArray)
        // {
        //     var record = JTokenToGenericRecord(recordJToken, avroSchema);
        //     writer.Write(record, encoder);
        // }
        //
        // encoder.Flush();

        var fileWriter = af.DataFileWriter<GenericRecord>.OpenWriter(
            new GenericWriter<GenericRecord>(avroSchema),
            "avro.avro");
        foreach(var recordJToken in jArray)
        {
            var record = JTokenToGenericRecord(recordJToken, avroSchema);
            fileWriter.Append(record);
        }
        fileWriter.Close();

        // Optionally, you can convert bytes to string or write to a file

        return new Result(new byte[0]);
    }

    // static void WriteAvroFile(string filePath, RecordSchema schema, GenericRecord[] records)
    // {
    //     using (var stream = File.Create(filePath))
    //     {
    //         using (var writer = new AvroSerializer<GenericRecord>(stream, new SpecificDefaultResolver(schema, schema)))
    //         {
    //             foreach (var record in records)
    //             {
    //                 writer.Write(record);
    //             }
    //         }
    //     }
    // }

    static GenericRecord JTokenToGenericRecord(JToken jToken, RecordSchema avroSchema)
    {
        var genericRecord = new GenericRecord(avroSchema);
        foreach (var field in avroSchema.Fields)
        {
            var fieldName = field.Name;
            var fieldSchema = field.Schema;

            if (fieldSchema is RecordSchema recordSchema)
            {
                var fieldValue = JTokenToGenericRecord(jToken[fieldName], recordSchema);
                genericRecord.Add(fieldName, fieldValue);
            }
            else
            {
                if (fieldSchema is not PrimitiveSchema fieldType)
                {
                    throw new ArgumentException($"Field '{fieldName}' has an unsupported type.");
                }

                // Check if the field exists in the JToken
                if (jToken[fieldName] != null)
                {
                    var csharpType = AvroTypeToCSharpType(fieldType.Tag);
                    var fieldValue = jToken[fieldName].ToObject(csharpType);
                    genericRecord.Add(fieldName, fieldValue);
                }
                else
                {
                    // Handle missing fields or set default values if necessary
                    // For simplicity, we assume all fields are present in the JSON
                    throw new ArgumentException($"Field '{fieldName}' is missing in the JSON.");
                }
            }
        }
        return genericRecord;
    }

    private static Type AvroTypeToCSharpType(global::Avro.Schema.Type avroType)
    {
        return avroType switch
        {
            global::Avro.Schema.Type.Null => typeof(object),
            global::Avro.Schema.Type.Boolean => typeof(bool),
            global::Avro.Schema.Type.Int => typeof(int),
            global::Avro.Schema.Type.Long => typeof(long),
            global::Avro.Schema.Type.Float => typeof(float),
            global::Avro.Schema.Type.Double => typeof(double),
            global::Avro.Schema.Type.Bytes => typeof(byte[]),
            global::Avro.Schema.Type.String => typeof(string),
            global::Avro.Schema.Type.Array => typeof(List<object>),
            global::Avro.Schema.Type.Map => typeof(Dictionary<string, object>),
            global::Avro.Schema.Type.Record => typeof(GenericRecord),
            global::Avro.Schema.Type.Enumeration => typeof(string),
            global::Avro.Schema.Type.Fixed => typeof(byte[]),
            global::Avro.Schema.Type.Union => typeof(object),
            _ => throw new ArgumentOutOfRangeException(nameof(avroType), avroType, null)
        };
    }
}