using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Threading;
using Avro;
using Avro.Generic;
using Avro.IO;
using Frends.Avro.Serialize.Definitions;
using Newtonsoft.Json.Linq;
using af = Avro.File;

namespace Frends.Avro.Serialize;

/// <summary>
/// Avro task.
/// </summary>
public class Avro
{
    /// <summary>
    /// Serialize JSON into Avro.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.Avro.Serialize)
    /// </summary>
    /// <param name="input">Input parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, string Xml }</returns>
    public static Result Serialize([PropertyTab] Input input, CancellationToken cancellationToken)
    {
        //validate input
        var outputPath = Path.Combine(input.OutputDir, input.OutputFile);

        // Parse JSON string into JToken
        var jToken = JToken.Parse(input.Json);
        if (jToken is not JArray)
            jToken = new JArray(jToken);

        var avroSchema = (RecordSchema)Schema.Parse(input.Schema);

        // Serialize JSON to Avro
        using var avroStream = new MemoryStream();
        var encoder = new BinaryEncoder(avroStream);
        var writer = new GenericDatumWriter<GenericRecord>(avroSchema);
        foreach (var recordJToken in jToken)
        {
            var record = JTokenToGenericRecord(recordJToken, avroSchema);
            writer.Write(record, encoder);
        }
        encoder.Flush();

        //WRITE FILE
        var fileWriter = af.DataFileWriter<GenericRecord>.OpenWriter(
            new GenericWriter<GenericRecord>(avroSchema),
            outputPath
        );
        foreach (var recordJToken in jToken)
        {
            var record = JTokenToGenericRecord(recordJToken, avroSchema);
            fileWriter.Append(record);
        }
        fileWriter.Close();

        return new Result { FilePath = outputPath };
    }

    static GenericRecord JTokenToGenericRecord(JToken jToken, RecordSchema avroSchema)
    {
        var genericRecord = new GenericRecord(avroSchema);
        foreach (var field in avroSchema.Fields)
        {
            var fieldName = field.Name;
            var fieldSchema = field.Schema;

            if (fieldSchema is RecordSchema recordSchema)
            {
                var fieldValue = JTokenToGenericRecord(jToken[fieldName], recordSchema);
                genericRecord.Add(fieldName, fieldValue);
            }
            else
            {
                if (fieldSchema is not PrimitiveSchema fieldType)
                {
                    throw new ArgumentException($"Field '{fieldName}' has an unsupported type.");
                }

                // Check if the field exists in the JToken
                if (jToken[fieldName] != null)
                {
                    var csharpType = AvroTypeToCSharpType(fieldType.Tag);
                    var fieldValue = jToken[fieldName].ToObject(csharpType);
                    genericRecord.Add(fieldName, fieldValue);
                }
                else
                {
                    // Handle missing fields or set default values if necessary
                    // For simplicity, we assume all fields are present in the JSON
                    throw new ArgumentException($"Field '{fieldName}' is missing in the JSON.");
                }
            }
        }
        return genericRecord;
    }

    private static Type AvroTypeToCSharpType(Schema.Type avroType) =>
        avroType switch
        {
            Schema.Type.Null => typeof(object),
            Schema.Type.Boolean => typeof(bool),
            Schema.Type.Int => typeof(int),
            Schema.Type.Long => typeof(long),
            Schema.Type.Float => typeof(float),
            Schema.Type.Double => typeof(double),
            Schema.Type.Bytes => typeof(byte[]),
            Schema.Type.String => typeof(string),
            Schema.Type.Array => typeof(List<object>),
            Schema.Type.Map => typeof(Dictionary<string, object>),
            Schema.Type.Record => typeof(GenericRecord),
            Schema.Type.Enumeration => typeof(string),
            Schema.Type.Fixed => typeof(byte[]),
            Schema.Type.Union => typeof(object),
            _ => throw new ArgumentOutOfRangeException(nameof(avroType), avroType, null)
        };
}
